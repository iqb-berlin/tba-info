---
lang: de
title: "Daten und Prozesse"
---

::: {.callout-note}
In Bearbeitung THuste: to do

* Verlinkungen anpassen, wenn entsprechende Seiten auf Quarto umgezogen sind

:::

![Übersicht Testcenter Daten Ein- und Ausgabe](TC_Daten_Input_Output.png)

# Daten-Input für das Testcenter

::: {.callout-tip}
Wie Daten in das Testcenter geladen werden können, ist im Kapitel: **Schritt für Schritt** detailliert beschrieben.
:::

Das **Studio** kann nach dem Aufgabenentwurf Dateien ausgeben (exportieren). Diese Dateien müssen zur Testdurchführung in das **Testcenter** geladen werden. Nachfolgend werden die Funktionen dieser Dateien beschrieben. Zum besseren Verständnis schauen Sie sich auch gerne die [Videos](https://box.hu-berlin.de/f/81701b5fa68446bc99a3/) zum Thema Testdateien an.

## Logins und anwendungsspezifische Konfigurationen

Jede Person, die an einem Test bzw. einer Befragung beteiligt ist, muss Zugangsdaten erhalten. Diese Zugangsdaten und nachfolgend aufgeführte Funktionen übernimmt eine XML-Datei. Die XML-Datei trägt IQB-intern den Namen: **Testtaker-XML**. Prinzipiell ist der Dateiname aber frei wählbar. Nachfolgend werden die Funktionen der Testtaker-XML aufgelistet.

**Festlegung Logindaten/ Anmeldeverfahren:**

Jeder Login muss eine eindeutige ID (Namen) erhalten und je nach gewähltem Anmeldeverfahren ein Passwort, einen Code usw.. Bei einer großen Anzahl von Testpersonen kann das mühselig sein. Hier kann ein vom IQB entwickeltes Programm mit dem Namen: **itc-Toolbox** helfen das Erzeugen solcher Zugänge zu beschleunigen.

::: {.callout-note}
Das Erstellen von Logins wird unterstützt vom dem Windows-Programm: **itc-Toolbox**. Mehr Informationen dazu sind dem gleichnamigen Kapitel zu entnehmen.
:::

Für eine Anmeldung zu einer Testdurchführung sind verschiedene Arten der Anmeldung zulässig, bspw. ganz klassisch mittels Namen und Passwort oder via Link.

::: {.callout-tip}
Mehr Informationen zu den Login/Anmeldeverfahren sind den Referenzen zu entnehmen!
:::

Um eine Testdurchführung so modular wie möglich gestalten zu können, kann jeder Login einer Gruppe (`Group`) zugeordnet werden. Gruppen können dann bspw. mit zeitlichen Beschränkungen versehen werden und mit einem Gruppenmonitor überwacht werden. Bei einer finalen Testdurchführung werden die gegebenen Antworten dann auch Gruppenabhängig gespeichert.

**Testheftzuweisung:**

Aufgaben werden in Testheften (Booklets) zusammen gefasst werden. Jedem Login kann gezielt ein Testheft zugewiesen werden. Die Zuweisung mehrerer Testhefte ist möglich. Nach Anmeldung werden die zugeordneten Testhefte der Testperson präsentiert.

**Modi der Testdurchführung:**

Um den Ablauf der Testung festzulegen, wird zu jedem Login ein Modus hinterlegt. Dieser Modus bestimmt  wie die Testung für den jeweiligen Login durchgeführt wird (finaler Durchlauf oder nur Review). Jeder Modus verfügt über spezifische Eigenschaften. Bspw. werden bei Wahl eines Modus zur finalen Testdurchführung alle Antworten zum Login gespeichert, während bei der Wahl eines Review-Modus die Antworten nicht gespeichert werden. Es sind auch spezielle Modi für die Testleitung vorgesehen. Die Testleitung wird dann in die Lage versetzt den Testverlauf zu steuern.

::: {.callout-tip}
[**Referenz**](/Referenzen/Modi_der_Testdurchfuehrung.qmd): Detaillierte Informationen zu den Modi der Testdurchführung und deren Eigenschaften sind den Referenzen zu entnehmen!
:::

**Anwendungsspezifische Textersetzungen:**

Einzelne Texte der Anwendung können individuell an die eigene Bedürfnisse angepasst werden. Bspw. können Texte von Dialogfenster und Warnungen angepasst werden. Die möglichen änderbaren Texte werden dazu in ein spezielles Feld (`<CustomTexts>`) in der **Testtaker-XML** geschrieben werden. Die hier angegebenen Texte überschreiben dann die Standardtexte. 

::: {.callout-tip}
Detaillierte Informationen zu den Textersetzungen sind den Referenzen zur Testtaker-XML zu entnehmen!
:::

## Testheft-Definition (Test-Def)

Eine weitere XML-Datei übernimmt die Test-Definition. Sie trägt IQB-intern den Namen **Booklet-XML**. Auch hier kann der Dateiname frei gewählt werden. Folgendes kann in dieser Datei festgelegt werden:

`Unit`

Die Reihenfolge der Aufgaben kann frei festgelegt werden. Der Aufruf erfolgt hierbei mittels eindeutiger ID der Aufgabe.

::: {.callout-note}
Aufgaben werden auch oft **Units** genannt!
:::

`Testlet`

Aufgaben können **Testlets** zugewiesen werden oder in **Testlets** zusammen gefasst werden. 

::: {.callout-note}
Ein Testlet wird auch oft als BLOCK bezeichnet!
:::

Für Testlets können Beschränkungen (`Restrictions`)festgelegt werden, bspw. kann ein Testlet mit einem Zugangscode versehen werden oder es ist nur für eine bestimmte Zeit zugänglich. 

`BookletConfig`

Hinsichtlich Funktionalität und Layout der Testumgebung, können hier individuelle Festlegungen getroffen werden.

::: {.callout-tip}
Mehr Informationen zu den Inhalten der **Booklet-XML** sind den Referenzen zu entnehmen!
:::

## Unit-Definition

Die Unit-Definition besteht aus zwei XML-Dateien, die zueinander gehören. In einer der beiden XML-Dateien werden Metadaten, wie bspw. ID und Label der Aufgabe und weiteres festgelegt. Diese wird IQB-intern als **Unit-XML** bezeichnet. Die andere XML-Datei enthält die Aufgabeninhalte in einem bestimmten Format mit der Dateiendung **.VOUD**. Günstigerweise trägt diese Datei den gleichen Namen wie die zugehörige **Unit-XML**. Die **Unit-VOUD** wird in der **Unit-XML** eingebunden.

#### Unit-XML

Folgendes kann in dieser Datei festgelegt werden:

`Metadaten`

Die Metadaten zu einer Unit. Hierzu gehören eine eindeutige `Id` der Aufgabe, ein `Label` und eine `Describtion`.

`DefinitionRef`

Hier wird angegeben mit welchem **Editor** die Aufgabe erstellt wurde, mit welchem **Player** die Aufgabe wiedergegeben werden soll und welche zugehörige **Unit-VOUD** (falls vorhanden) eingebunden werden soll.  

`CodingSchemeRef`

Die Version des zur Kodierung verwendete Schemers wird hier angegeben.

`BaseVariables`

Hier werden die während der Kodierung angelegten Variablen gelistet.

`DerivedVariables`

Hier werden die während der Kodierung abgeleiteten Variablen gelistet.

#### Unit-VOUD

Bei der Voud-Datei handelt es sich um ein internes Format, welches die Aufgabeninhalte angibt. Es ist nur schlecht  manuell editierbar. Es muss stattdessen über einen Editor erzeugt und ggf. verändert werden. Das IQB-Studio bietet derartige Editoren.

::: {.callout-tip}
Mehr Informationen zur **Unit-Definition** sind den Referenzen zu entnehmen!
:::

## Player

In der Grafik ist dargestellt, dass das Testcenter intern eine Komponente "Player" enthält. Grundidee dieser Teilung ist, dass das interne Format einer Unit-Definition nicht direkt vom Testcenter selbst verarbeitet wird, sondern von einem Plug-In, welches je nach Unit-Datentyp hinzugeladen wird. Durch diese Technik wird eine hohe Flexibilität erreicht: Änderungen der unitbezogenen Programmierung führen nicht zu einem neuen Testcenter, sondern nur der Plug-In-Code des Players wird ausgetauscht.

Für die Vorbereitung eines Tests bedeutet dies:

1. jede Unit-Definition einen Verweis auf das Datenformat und damit auf den erforderlichen Player enthalten muss und
2. alle Player, die von Units benötigt werden, müssen vorab als Ressourcendatei in das Testcenter geladen werden

::: {.callout-note}
Daten, die in das Testcenter geladen werden, werden auch als **Testdateien** bezeichnet. Sie steuern den Testablauf, das Testlayout und die Testzugänge.
:::

# Daten-Output des Testcenters

::: {.callout-tip}
Wie Daten aus dem Testcenter geladen werden können, ist im Kapitel: **Schritt für Schritt** detailiert beschrieben.
:::

## Logs

Ereignisse innerhalb einer Unit und auch insgesamt innerhalb eines Tests, werden in ein Protokoll geschrieben. Dieses sog. "Logging" kann reduziert und auch ganz abgestellt werden, um die Datenmenge zu reduzieren. Welche Ereignisse genau gespeichert werden, ist auch vom Player abhängig. Folgende Erkenntnisse lassen sich beispielsweise aus den Log-Daten ablesen:
* Version des Betriebssystems und des Browsers
* Verweildauer auf einer Seite
* Zeitpunkt des Beendens der Beantwortung

## Antworten

Als Antworten werden Zustandsänderungen der Eingabe-Elemente der Units verstanden. Wenn die Testperson ein Ankreuzkästchen wählt, eine Linie mit der Maus verschiebt oder mehrere Sätze in ein Eingabefeld schreibt - all diese Eingaben werden mit dem jeweils letzten Stand gespeichert.

## Weitere Daten

* **Kommentare, Review**: Wenn ein Test im Review-Modus durchgeführt wird, können zu Aufgaben oder zum gesamten Test Kommentare gegeben werden. Auch diese Kommentare sind über den Management-Bereich abrufbar.
* **System-Check Berichte**: Nach der Durchführung eines System-Checks werden bei Bedarf die Daten in der Datenbank gespeichert und sind ebenfalls abrufbar.


# Daten-Bearbeitung

::: {.callout-tip}
Wie Daten vor dem Laden in das Testcenter bearbeitet werden können, ist im Kapitel: **Schritt für Schritt** detailiert beschrieben.
:::

Die XML-Dateien können vor dem Laden in das Testcenter bearbeitet werden. So können Testungen individuell gestaltet werden und gesteuert werden.

Nachfolgend werden alle **Testdateien** und die darin verfügbaren **Attribute**, die während der manuellen Bearbeitung zur Verfügung stehen, aufgezeigt:

* [Allgemeine Hinweise für die Bearbeitung von XML-Dateien](Arbeiten-mit-Xml%E2%80%90Dateien)
* Units: 
  * [Bearbeiten der XML-Datei](Unit%E2%80%90Xml)
* Booklets:
  * [Bearbeiten der XML-Datei](Booklet%E2%80%90Xml)
  * [Unterstützung durch itc-ToolBox](https://github.com/iqb-berlin/itc-toolbox#readme)
* Logins:
  * [Bearbeiten der XML-Datei](Testtaker%E2%80%90Xml)
  * [Unterstützung durch itc-ToolBox](https://github.com/iqb-berlin/itc-toolbox#readme)
  * [Anmeldeverfahren](Login-Anmeldeverfahren)
  * [Modi der Testdurchführung](Login-Modi-der-Testdurchf%C3%BChrung)

Ist die nachträgliche Bearbeitung (falls gewünscht) der **Testdateien** abgeschlossen, können die **Testdateien** in einen **Arbeitsbereich** innerhalb des **Testcenters** geladen werden. Mehr zum Thema **Arbeitsbereich** im **Testcenter** ist [**hier**](2.3-Verwaltung-und-Organisation) zu finden.