---
lang: de
title: "Daten und Prozesse"
---

::: {.callout-note}
In Bearbeitung THuste: to do

* Verlinkungen anpassen, wenn entsprechende Seiten auf Quarto umgezogen sind

:::

![Übersicht Testcenter Daten Ein- und Ausgabe](TC_Daten_Input_Output.png)

# Daten-Input für das Testcenter

::: {.callout-tip}
## Wie Daten in das Testcenter geladen werden können, ist im Kapitel: Schritt für Schritt detailiert beschrieben.
:::

Das **Studio** kann nach dem Aufgabenentwurf Dateien ausgeben (exportieren). Diese Dateien müssen zur Testdurchführung in das **Testcenter** geladen werden. Nachfolgend werden die Funktionen dieser Dateien beschrieben. Zum besseren Verständnis schauen Sie sich auch gerne die [Videos](https://box.hu-berlin.de/f/81701b5fa68446bc99a3/) zum Thema Testdateien an.

## Logins und weitere Konfigurationen

Jede Person, die an einem Test bzw. einer Befragung beteiligt ist, muss Zugangsdaten erhalten. Diese Zugangsdaten werden in einer XML-Datei hinterlegt und dort einer Login-Gruppe (`Group`) zugewiesen. Die XML-Datei trägt IQB-intern den Namen: **TESTTAKER-XML**. Prinzipiell ist der Dateiname aber frei wählbar. 

Für eine Anmeldung zu einer Testdurchführung sind verschiedene Arten der Anmeldung zulässig. Bspw. ganz klassisch mittels Namen und Passwort oder via Link.

::: {.callout-tip}
## Mehr Informationen zu den Anmeldeverfahren sind den Referenzen zu entnehmen!
:::

Jeder Login muss eine eindeutige ID (Namen) erhalten und je nach gewähltem Anmeldeverfahren ein Passwort, einen Code usw.. Bei einer großen Anzahl von Testpersonen kann das mühselig sein. Hier kann ein vom IQB entwickeltes Programm mit dem Namen: **itc-Toolbox** helfen das Erzeugen solcher Zugänge zu beschleunigen.

::: {.callout-note}
## Das Erstellen von Logins wird unterstützt vom dem Windows-Programm: itc-Toolbox. Mehr Informationen dazu sind dem gleichnamigen Kapitel zu entnehmen.
:::

Um die Art des Zugriffs festzulegen, wird zu jedem Login ein Modus hinterlegt. Wie der Test für einen Login durchgeführt werden soll. Folgende Modi stehen zur Verfügung:

`run-hot-return`und `run-hot-restart`

Die angemeldeten Personen führen den Test "heiß" durch, sprich deren Antworten bilden mit dem Rohdatensatz die Grundlage der Auswertung.

`run-review`

Zum Ausprobieren eines Tests können spezielle Logins vorbereitet werden. Man kann dann Kommentare zu den Aufgaben und dem Test vergeben und es sind einige Navigationsbeschränkungen unwirksam, wie z. B. Zeitlimits.

`run-demo`

Man kann den Test aufrufen, aber die Antworten werden nicht dauerhaft gespeichert. Ruft eine andere Person mit denselben Login-Daten den Test auf, werden keine älteren Antworten geladen.

`monitor-group` und `monitor-study`

Diese Modi sorgen dafür, dass die angemeldete Person den Gruppen-Monitor für eine oder mehrere Login-Gruppen startet. Damit kann der Fortschritt der Beantwortung beobachtet werden. Außerdem können Testpersonen ausgeschlossen, ein Test angehalten oder eine Navigation zu einem Testblock erzwungen werden. Dieser Gruppen-Monitor kann von der Testleitung zur Teststeuerung verwendet werden.

Außer den Logins können weitere Konfigurationen der Testumgebung in der **TESTTAKER-XML** erfolgen. Bspw. können individuelle Textersetzungen vorgenommen werden. Jedem Login kann ein bestimmtes Testheft zugewiesen werden. Logins können zeitliche Beschränkungen erhalten.

::: {.callout-tip}
## Mehr Informationen zu den Inhalten der TESTTAKER-XML sind den Referenzen zu entnehmen!
:::

## Test-Definition

Eine weitere XML-Datei übernimmt die Test-Definition. Sie trägt IQB-intern den Namen **BOOKLET-XML**. Auch hier kann der Dateiname frei gewählt werden. Folgendes kann in dieser Datei festgelegt werden:

`Unit`

Die Reihenfolge der Aufgaben kann frei festgelegt werden. Der Aufruf erfolgt hierbei mittels eindeutiger ID der Aufgabe.

::: {.callout-note}
## Aufgaben werden auch oft UNITS genannt!
:::

`Testlet`

Aufgaben können **Testlets** zugewiesen werden oder in **Testlets** zusammen gefasst werden. 

::: {.callout-note}
## Ein Testlet wird auch oft als BLOCK bezeichnet!
:::

Für Testlets können Beschränkungen (`Restrictions`)festgelegt werden, bspw. kann ein Testlet mit einem Zugangscode versehen werden oder es ist nur für eine bestimmte Zeit zugänglich. 

`BookletConfig`

Hinsichtlich Funktionalität und Layout der Testumgebung, können hier individuelle Festlegungen getroffen werden.

::: {.callout-tip}
## Mehr Informationen zu den Inhalten der Booklet-XML sind den Referenzen zu entnehmen!
:::

## Unit-Definition

Die Unit-Definition besteht aus zwei XML-Dateien, die zueinander gehören. In einer der beiden XML-Dateien werden Metadaten, wie bspw. ID und Label der Aufgabe und weiteres festgelegt. Diese wird IQB-intern als **UNIT-XML** bezeichnet. Die andere XML-Datei enthält die Aufgabeninhalte in einem bestimmten Format mit der Dateiendung **.VOUD**. Günstigerweise trägt diese Datei den gleichen Namen wie die zugehörige **UNIT-XML**. Die **UNIT-VOUD** wird in der **UNIT-XML** eingebunden.

#### UNIT-XML

Folgendes kann in dieser Datei festgelegt werden:

`Metadaten`

Die Metadaten zu einer Unit. Hierzu gehören eine eindeutige `Id` der Aufgabe, ein `Label` und eine `Describtion`.

`DefinitionRef`

Hier wird angegeben mit welchem **Editor** die Aufgabe erstellt wurde, mit welchem **Player** die Aufgabe wiedergegeben werden soll und welche zugehörige **UNIT-VOUD** (falls vorhanden) eingebunden werden soll.  

`CodingSchemeRef`

Die Version des zur Kodierung verwendete Schemers wird hier angegeben.

`BaseVariables`

Hier werden die während der Kodierung angelegten Variablen gelistet.

`DerivedVariables`

Hier werden die während der Kodierung abgeleiteten Variablen gelistet.

#### UNIT-VOUD

Bei der Voud-Datei handelt es sich um ein internes Format, welches die Aufgabeninhalte angibt. Es ist nur schlecht  manuell editierbar. Es muss stattdessen über einen Editor erzeugt und ggf. verändert werden. Das IQB-Studio bietet derartige Editoren.

::: {.callout-tip}
## Mehr Informationen zu den Inhalten der UNIT-XML und UNIT-VOUD sind den Referenzen zu entnehmen!
:::

## Player

In der Grafik ist dargestellt, dass das Testcenter intern eine Komponente "Player" enthält. Grundidee dieser Teilung ist, dass das interne Format einer Unit-Definition nicht direkt vom Testcenter selbst verarbeitet wird, sondern von einem Plug-In, welches je nach Unit-Datentyp hinzugeladen wird. Durch diese Technik wird eine hohe Flexibilität erreicht: Änderungen der unitbezogenen Programmierung führen nicht zu einem neuen Testcenter, sondern nur der Plug-In-Code des Players wird ausgetauscht.

Für die Vorbereitung eines Tests bedeutet dies:

1. jede Unit-Definition einen Verweis auf das Datenformat und damit auf den erforderlichen Player enthalten muss und
2. alle Player, die von Units benötigt werden, müssen vorab als Ressourcendatei in das Testcenter geladen werden

::: {.callout-note}
Daten, die in das Testcenter geladen werden, werden auch als **Testdateien** bezeichnet. Sie steuern den Testablauf, das Testlayout und die Testzugänge.
:::

# Daten-Output des Testcenters

::: {.callout-tip}
Wie Daten aus dem Testcenter geladen werden können, ist im Kapitel: **Schritt für Schritt** detailiert beschrieben.
:::

## Logs

Ereignisse innerhalb einer Unit und auch insgesamt innerhalb eines Tests, werden in ein Protokoll geschrieben. Dieses sog. "Logging" kann reduziert und auch ganz abgestellt werden, um die Datenmenge zu reduzieren. Welche Ereignisse genau gespeichert werden, ist auch vom Player abhängig. Folgende Erkenntnisse lassen sich beispielsweise aus den Log-Daten ablesen:
* Version des Betriebssystems und des Browsers
* Verweildauer auf einer Seite
* Zeitpunkt des Beendens der Beantwortung

## Antworten

Als Antworten werden Zustandsänderungen der Eingabe-Elemente der Units verstanden. Wenn die Testperson ein Ankreuzkästchen wählt, eine Linie mit der Maus verschiebt oder mehrere Sätze in ein Eingabefeld schreibt - all diese Eingaben werden mit dem jeweils letzten Stand gespeichert.

## Weitere Daten

* **Kommentare, Review**: Wenn ein Test im Review-Modus durchgeführt wird, können zu Aufgaben oder zum gesamten Test Kommentare gegeben werden. Auch diese Kommentare sind über den Management-Bereich abrufbar.
* **System-Check Berichte**: Nach der Durchführung eines System-Checks werden bei Bedarf die Daten in der Datenbank gespeichert und sind ebenfalls abrufbar.


# Daten-Bearbeitung

::: {.callout-tip}
Wie Daten vor dem Laden in das Testcenter bearbeitet werden können, ist im Kapitel: **Schritt für Schritt** detailiert beschrieben.
:::

Die XML-Dateien können vor dem Laden in das Testcenter bearbeitet werden. So können Testungen individuell gestaltet werden und gesteuert werden.

Nachfolgend werden alle **Testdateien** und die darin verfügbaren **Attribute**, die während der manuellen Bearbeitung zur Verfügung stehen, aufgezeigt:

* [Allgemeine Hinweise für die Bearbeitung von XML-Dateien](Arbeiten-mit-Xml%E2%80%90Dateien)
* Units: 
  * [Bearbeiten der XML-Datei](Unit%E2%80%90Xml)
* Booklets:
  * [Bearbeiten der XML-Datei](Booklet%E2%80%90Xml)
  * [Unterstützung durch itc-ToolBox](https://github.com/iqb-berlin/itc-toolbox#readme)
* Logins:
  * [Bearbeiten der XML-Datei](Testtaker%E2%80%90Xml)
  * [Unterstützung durch itc-ToolBox](https://github.com/iqb-berlin/itc-toolbox#readme)
  * [Anmeldeverfahren](Login-Anmeldeverfahren)
  * [Modi der Testdurchführung](Login-Modi-der-Testdurchf%C3%BChrung)

Ist die nachträgliche Bearbeitung (falls gewünscht) der **Testdateien** abgeschlossen, können die **Testdateien** in einen **Arbeitsbereich** innerhalb des **Testcenters** geladen werden. Mehr zum Thema **Arbeitsbereich** im **Testcenter** ist [**hier**](2.3-Verwaltung-und-Organisation) zu finden.