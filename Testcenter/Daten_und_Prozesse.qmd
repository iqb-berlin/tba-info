---
lang: de
title: "Daten und Prozesse"
---

::: {.callout-note}
In Bearbeitung THuste: to do

* Verlinkungen anpassen, wenn entsprechende Seiten auf Quarto umgezogen sind

:::

![Übersicht Testcenter Daten Ein- und Ausgabe](TC_Daten_Input_Output.png)

# Daten-Input für das Testcenter

Um eine Studie mit dem Testcenter durchführen zu können, müssen Daten eingegeben werden. Diese Daten steuern den Zugriff auf die Studie (Logins), legen das Verhalten während der Durchführung fest und bestimmen Aufbau, Aufgabenreihenfolge und Aussehen der Studie (Test-Definition, Unit-Definition). Die einzugebenen Daten bestehen aus mehreren einzelnen Dateien in unterschiedlichen Dateiformaten. Die Gesamtheit all dieser Dateien wird auch häufig als **Testdateien** bezeichnet. Die **Testdateien** werden nach der Aufgabenerstellung im **IQB-Studio** ausgegeben.

::: {.callout-tip}
Wie diese Daten in das Testcenter geladen werden können, ist im Kapitel: **Schritt für Schritt** detailliert beschrieben.
:::

::: {.callout-note}
[Hier](https://box.hu-berlin.de/f/81701b5fa68446bc99a3/) ist auch ein kleineres Video zu den Testdateien.
:::

Welche **Testdateien** es gibt und welche Funktionen diese aufweisen, ist nachfolgend beschrieben.

## Logins (Testtaker-XML)

Die Zugangsdaten für die teilnehmenden Testpersonen und weitere wichtige Funktionen für den Testablauf werden in einer XML-Datei festgelegt. Diese XML-Datei trägt IQB-intern den Namen: **Testtaker-XML**. Prinzipiell ist der Dateiname aber frei wählbar.

#### Welche Funktionen übernimmt die Testtaker-XML?

* **Festlegung Zugangsdaten/ Anmeldeverfahren:**<br> Um eine Testdurchführung zu starten, müssen die teilnehmenden Personen zuvor mit entsprechenden Zugangsdaten angelegt werden. Die gespeicherten Antworten eines Testdurchlaufs werden dann zu diesen im System hinterlegten Zugansgdaten zugeordnet. Bei der Art der Anmeldung kann zwischen einer Vielzahl von Optionen gewählt werden. Die Anmeldung kann bspw. klassisch mittels Benutzernamen und Passwort erfolgen, mittels Code oder via Link. Mehr Informationen zu den [Anmeldeverfahren](/Referenzen/Anmeldeverfahren.qmd) sind den Referenzen zu entnehmen!
* **Gruppierung von Zugansgdaten:**<br>Die angelegten Testpersonen werden in Gruppen angelegt. Diese Gruppe können mit zeitlichen Beschränkungen versehen werden und mit einem Gruppenmonitor überwacht werden. Bei einer finalen Testdurchführung werden die gegebenen Antworten dann auch Gruppenabhängig gespeichert.
* **Testheftzuweisung:** Aufgaben können in Testheften (Booklets) zusammengefasst werden. Jedem Login kann gezielt ein Testheft zugewiesen werden. Die Zuweisung mehrerer Testhefte ist möglich. Nach Anmeldung werden die zugeordneten Testhefte der Testperson präsentiert.
* **Testablauf (bspw. heißer Test oder Review):**<br> Um den Ablauf der Testung festzulegen, wird zu jedem Login ein Modus hinterlegt. Dieser Modus bestimmt  wie die Testung für den jeweiligen Login durchgeführt wird (finaler Durchlauf oder nur Review). Jeder Modus verfügt über spezifische Eigenschaften, bspw. werden bei Wahl eines Modus zur finalen Testdurchführung alle Antworten zum Login gespeichert, während bei der Wahl eines Review-Modus die Antworten nicht gespeichert werden. Es sind auch spezielle Modi für die Testleitung vorgesehen. Die Testleitung wird dann in die Lage versetzt den Testverlauf steuern zu können. Detaillierte Informationen zu den [Modi der Testdurchführung](/Referenzen/Modi_der_Testdurchfuehrung.qmd) und deren Eigenschaften sind den Referenzen zu entnehmen!
* **individuelle Textersetzungen:**<br> Einzelne Texte der Anwendung können individuell an die eigene Bedürfnisse angepasst werden. Bspw. können Texte von Dialogfenster und Warnungen angepasst werden. Detaillierte Informationen zu den Textersetzungen sind den Referenzen zur [Testtaker-XML](/Referenzen/Testtaker_Xml.qmd) zu entnehmen!

## Booklet-XML

Eine weitere XML-Datei übernimmt die Test-Definition. Sie trägt IQB-intern den Namen **Booklet-XML**. Auch hier kann der Dateiname frei gewählt werden. Diese Datei ist oben im Bild mit "Test-Def" gekennzeichnet. Folgendes kann in dieser Datei festgelegt werden:

**Aufgabenreihenfolge**

Die Reihenfolge der Aufgaben kann frei festgelegt werden. Der Aufruf erfolgt hierbei mittels eindeutiger ID der Aufgabe.

::: {.callout-note}
Aufgaben werden auch oft **Units** genannt!
:::

**Aufgabensammlungen**

Aufgaben können **Testlets** zugewiesen werden oder in **Testlets** zusammen gefasst werden. 

::: {.callout-note}
Ein Testlet wird auch oft als **Block** bezeichnet!
:::

Für Testlets können Beschränkungen festgelegt werden, bspw. kann ein Testlet mit einem Zugangscode versehen werden oder es ist nur für eine bestimmte Zeit zugänglich. 

**Booklet Konfiguration**

Hinsichtlich Funktionalität und Layout der Testumgebung, können hier individuelle Festlegungen getroffen werden.

::: {.callout-tip}
Mehr Informationen zu den Inhalten der **Booklet-XML** sind den Referenzen zu entnehmen!
:::

## Unit-Definition

Die Unit-Definition besteht aus zwei Dateien, die zueinander gehören. In einer Datei werden Metadaten wie bspw. ID und Label der Aufgabe festgelegt, in der anderen sind die eigentlichen Aufgabenelemente enthalten. Erstere ist wieder eine XML-Datei mit dem IQB-internen Namen **Unit-XML**. Letztere enthält die Aufgabeninhalte in einem bestimmten Format mit der Endung **.VOUD**. Günstigerweise trägt diese Datei den gleichen Namen wie die zugehörige **Unit-XML**. Die **Unit-VOUD** wird in der **Unit-XML** eingebunden. Die möglichen Funktionen der beiden Dateien werden nachfolgend beschrieben.

::: {.callout-tip}
Mehr Informationen zur **Unit-Definition** sind auch den Referenzen zu entnehmen!
:::

### Unit-XML

Folgendes kann in dieser Datei festgelegt werden:

**Metadaten**

Die Metadaten zu einer Unit. Hierzu gehören eine eindeutige ID der Aufgabe, ein Label und eine Beschreibung.

**Angaben zur Aufgabenerstellung und Aufgabenwiedergabe**

Angabe des zur Aufgabenerstellung verwendeten **Editors** und gewünschten **Players** zur Aufgabenwiedergabe. Deklaration der zugehörigen Aufgabenressource (Unit-VOUD).

**Angaben zur Aufgabenkodierung**

An dieser Stelle wird die Version des verwendeten **Schemers** zur Aufgabenkodierung angegeben. Im Weiteren sind hier alle Variablen bzgl. Aufgabenkodierung aufgeführt.

### Unit-VOUD

Diese Datei enthält die eigentlichen Aufgabenelemente, wie bspw. Grafiken, Multiple Choice usw.. Sie wird oft auch als **Ressource zu einer Augabe** bezeichnet. Aufgrund ihres spezielles Formats ist sie nur schlecht  manuell veränderbar. Änderungen sollten über einen geeigneten Editor erfolgen. Das IQB-Studio bietet einen solchen Editor an.

::: {.callout-tip}
Bei bestimmten Aufgabenelementen, wie bspw. kurzen Textpassagen in einleitenden Aufgaben, wird eventuell keine Unit-VOUD erzeugt. Das Textelement befindet sich dann direkt in der Unit-XML und kann auch dort verändert werden.
:::

## System-Check

Vor Studiedurchführung kann geprüft werden, ob die vorhandene Hardware und die Internetanbindung für die Durchführung ausreichend sind. Es können über den System-Check auch Befragung erzeugt werden, die die Studienverantwortlichen sensibilisieren, bestimmte Faktoren, die der Stabilität einer Studiendurchführung dienen, zu beachten. Hier genannt sei als Beispiel das Abfrage von Browserversionen und der Verweis auf unterstütze Versionen.

Die Konfigurationen des System-Checks erfolgt in einer XML-Datei. Der Dateiname ist frei wählbar. 

::: {.callout-note}
Detaillierte Informationen zum **System-Check** sind dem gleichnamigen Kapitel zu entnehmen.
:::

## GeoGebra .itcr

Werden in Aufgaben GeoGebra-Elemente eingesetzt, muss eine entsprechende Ressource mit der Endung **.ITCR** mit zur Aufgabe in das Testcenter geladen werden.

::: {.callout-tip}
Mehr Informationen zu **GeoGebra** sind auch den Referenzen zu entnehmen!
:::

## Coding Schema 

Zu jeder Aufgabe kann im IQB-Studio ein entsprechendes Kodierschema angelegt werden. Bei Ausgabe der Aufgabe erzeugt das Studio eine Datei mit der Endung **.VOCS**. In dieser Datei sind die erstellten Kodierregeln enthalten. Diese Regeln werden im Testcenter derzeitig zur Durchführung adaptiver Testungen verwendet. 

::: {.callout-note}
Weitere Informationen zum adaptiven Testen sind dem Kapitel: **Testmethoden** zu entnehmen.
:::

## Metadaten .VOMD

::: {.callout-note}
Hier entsprechende Informationen einbringen!
:::

## Player

In der Grafik ist dargestellt, dass das Testcenter intern eine Komponente "Player" enthält. Grundidee dieser Teilung ist, dass das interne Format einer Unit-Definition, insbesondere der Unit-VOUD, nicht direkt vom Testcenter selbst verarbeitet wird, sondern von einem Plug-In, welches je nach Unit-Datentyp hinzugeladen wird. Durch diese Technik wird eine hohe Flexibilität erreicht: Änderungen der unitbezogenen Programmierung führen nicht zu einem neuen Testcenter, sondern nur der Plug-In-Code des Players wird ausgetauscht. Der Player ist somit eine eigenständige Programmierung, die die jeweilige Unit-Definition lesen und darstellen kann. Der Player übernimmt weitere Aufgaben (responses complete, presentation complete usw.).

Für die Vorbereitung eines Tests bedeutet dies:

1. jede Unit-Definition einen Verweis auf das Datenformat und damit auf den erforderlichen Player enthalten muss und
2. alle Player, die von Units benötigt werden, müssen vorab als Ressourcendatei in das Testcenter geladen werden

Das IQB hat verschiedene Player für unterschiedliche Unit-Formate programmiert. Alle Player sind bei GitHub veröffentlicht. Eine Übersicht finden Sie auf der [IQB-GitHub-Startseite](https://iqb-berlin.github.io)

# Daten-Output des Testcenters

::: {.callout-tip}
Wie Daten aus dem Testcenter geladen werden können, ist im Kapitel: **Schritt für Schritt** detailiert beschrieben.
:::

## Logs

Ereignisse innerhalb einer Unit und auch insgesamt innerhalb eines Tests, werden in ein Protokoll geschrieben. Dieses sog. "Logging" kann reduziert und auch ganz abgestellt werden, um die Datenmenge zu reduzieren. Welche Ereignisse genau gespeichert werden, ist auch vom Player abhängig. Folgende Erkenntnisse lassen sich beispielsweise aus den Log-Daten ablesen:
* Version des Betriebssystems und des Browsers
* Verweildauer auf einer Seite
* Zeitpunkt des Beendens der Beantwortung

## Antworten

Als Antworten werden Zustandsänderungen der Eingabe-Elemente der Units verstanden. Wenn die Testperson ein Ankreuzkästchen wählt, eine Linie mit der Maus verschiebt oder mehrere Sätze in ein Eingabefeld schreibt - all diese Eingaben werden mit dem jeweils letzten Stand gespeichert.

## Weitere Daten

* **Kommentare, Review**: Wenn ein Test im Review-Modus durchgeführt wird, können zu Aufgaben oder zum gesamten Test Kommentare gegeben werden. Auch diese Kommentare sind über den Management-Bereich abrufbar.
* **System-Check Berichte**: Nach der Durchführung eines System-Checks werden bei Bedarf die Daten in der Datenbank gespeichert und sind ebenfalls abrufbar.

# Daten-Bearbeitung

Die Testateien können vor dem Laden in das Testcenter bearbeitet werden. Hierfür ist ein Verständnis der Extensible Markup Language XML notwendig. Eine knappe Einleitung bietet hier der Punkt: **Mehr zu XML** in den Referenzen. Detaillierte Informationen dazu sind aber auch im Internet zu finden.

Die Bearbeitung von XML-Datei kann mit gängigen Text-Editoren erfolgen. Es können auch spezielle Editoren zum Einsatz kommen, wie bspw. Notepad++, die den Vorteil eines Syntax Highlighting bieten.