---
lang: de
title: "Verzweigtes Testen"
format:
  html:
    other-links:
      - text: XML-Schema für Booklet
        href: https://github.com/iqb-berlin/testcenter/blob/master/definitions/vo_Booklet.xsd
      - text: XML-Schema für Testtaker
        href: https://github.com/iqb-berlin/testcenter/blob/master/definitions/vo_Testtakers.xsd
---

Das Anzeigen von Testheften und Aufgaben kann abhängig von bestimmten Zuständen erfolgen. Die Festlegung von Zuständen und auch das Abfragen dieser erfolgt hauptsächlich in der **Booklet-XML** und stellenweise auch in der **Testtaker-XML**. Hierfür sind bestimmte Elemente und Attribute in den beiden XML vorgesehen. 

::: {.callout-tip}
Die Elemente und Attribute sind nicht frei wählbar. Welche Elemente und Attribute verwendet werden können, ist in der Schema-Definition festgelegt.
:::


## Konfiguration in der Booklet-XML

### Festlegung von Zuständen

```{.xml}
<States>
    <State id="bonus" label="Bonusaufgaben">
      <Option id="bonus1" label="ja" />
      <Option id="bonus2" label="ja" />
        <If>
            <Value of="var1" from="unit0" />
            <Is equal="a" />
        </If>
    </State>
 </States>
```

#### `<States>`

In diesem Element erfolgt die Festlegungen von Zuständen. Dieses Element darf nur einmal in der Booklet-XML angelegt sein.

#### `<State>`

Es können beliebig viele State-Elemente enthalten sein. Jedes State-Element erhält eine eindeutig `ìd` und ein optionales `label`. Über die ID kann ein State-Element selektiert werden. 

#### `<Option>`

Das Festlegen von Zuständen wird mithilfe dieses Elementes realisiert. In jedem State-Element können beliebige viele Options-Elemente enthalten sein. Jedes Options-Element verfügt über eine `id`. Über diese kann die Option selektiert werden. Hierüber kann später der Zustand eines Options-Elements abgefragt werden. Ein Options-Element kann ohne eine IF-Bedingung angelegt werden. Dann gilt diese Option als gesetzt. In diesem Beispiel ist die Option mit der ID: "bonus1" gesetzt. Wird die Option mit einer IF-Bedingung versehen, wird die Option erst gesetzt, wenn die Bedingung erfüllt ist. 

#### `<If>`

Es können verschachtelte IF-Anweisungen erfolgen.

#### `<Value>`

In diesem Beispiel wird der Wert eines Unit-Elements mit der ID: "var1" innerhalb einer Unit mit der ID: "unit0" abgefragt und es wird geprüft, ob dieser Wert mit dem Wert: "a" übereinstimmt (`equal`). Ist dies der Fall, wird die Option mit der ID: "bonus2" gesetzt.

Unit-Elemente können außer einem Wert noch einen Status enthalten. Wurden zu einem Unit-Element eine Kodierung hinterlegt, ist außerdem noch ein Score oder ein Code für das Element abrufbar. Sollen diese statt dem Wert geprüft werden, müssen die folgenden Elemente verwendet werden:

* `<Score>`: Kann verwendet, wenn eine entsprechende Kodierregel für das Unit-Element angelegt wurde. Damit dieser Wert abgefragt werden kann, muss das Testcenter die hinterlegte Kodierregel kennen. Zu der Unit-XML muss dann auch die Unit-VOCS mit in das Testcenter geladen werden.

* `<Code>`:  Kann verwendet, wenn eine entsprechende Kodierregel für das Unit-Element angelegt wurde. Damit dieser Wert abgefragt werden kann, muss das Testcenter die hinterlegte Kodierregel kennen. Zu der Unit-XML muss dann auch die Unit-VOCS mit in das Testcenter geladen werden.

* `<Status>`: THuste: Philipp fragen was das ist?

* `<Sum>`: THuste: Unterschied Sum und Count? Wenn geklärt eventuell noch einmal Ergebnis Bsp. anpassen.

    Beispiel: Inhalt von 3 Eingabeelementen wird addiert.
    
    ```{.xml}
        <If>
          <Sum>
            <Value of="var1" from="unit0"/>
            <Value of="var2" from="unit0"/>
            <Value of="var3" from="unit0"/>
          </Sum>
          <Is equal="3"/>
        </If>
    ```
* `<Count>`: Hiermit können logische Verknüpfungen erstellt werden.

    Beispiel: Nur eine der IF-Bedingungen darf erfüllt sein.

    ```{.xml}
        <If>
          <Count>
            <If>
                <Value of="var1" from="unit0"/>
                <Is equal="a" />
            </If>
            <If>
                <Value of="var1" from="unit0"/>
                <Is equal="b" />
            </If>
            <If>
                <Value of="var1" from="unit0"/>
                <Is equal="c" />
            </If>
          </Count>
          <Is equal="1" />
        </If>
    ```
* `<Median>`:

    Beispiel: Median von 3 Werten   
    
    ```{.xml}
        <If>
          <Median>
            <Value of="var1" from="unit0"/>
            <Value of="var2" from="unit0"/>
            <Value of="var3" from="unit0"/>
          </Median>
          <Is equal="2"/>
        </If>
    ```

* `<Mean>`: THuste: Was ist das?

#### `<Is>`

In diesem Beispiel wird der zuvor selektierte Wert (Value) eines Unit-Elements auf Übereinstimmung mit dem Wert: "a" geprüft. Hierfür wird das Attribut: `equal`benutzt. Es können aber weitere Vergleichsoperatoren eingesetzt werden:

* `<lowerThan>`
* `<greaterThan>`
* `<notEqual>`


### Abfrage von Zuständen

In Abhängigkeit der gesetzten Zustände kann nun festgelegt werden, welche Units angezeigt werden sollen. Hierfür wird im Testlet im Element: `<Restriction>` das Element: `<Show>`mit einem IF-Attribut angelegt. In diesem IF-Attribut wird geprüft, ob ein State-Element mit einer bestimmten ID ein gesetztes Options-Element mit einer bestimmten ID enthält.

```{.xml}
<Units>

    <Unit id="unit0" label="Startunit" labelshort="1"/>

    <Testlet id="Bonus-Aufgaben-1">
        <Restrictions>
            <Show if="bonus" is="bonus1" />
        </Restrictions>

        <Unit id="BonusUnit1" label="Bonus Unit 1" labelshort="2" />
        <Unit id="BonusUnit2" label="Bonus Unit 2" labelshort="3" />
        <Unit id="BonusUnit3" label="Bonus Unit 3" labelshort="4" />
    </Testlet>

</Units>
```

In diesem Beispiel wird geprüft, ob das State-Element mit der ID:"bonus" ein Options-Element mit der ID: "bonus1" enthält, also ob diese Option gesetzt ist. Ist das der Fall, sollen die entsprechenden Bonusaufgaben angezeigt werden. Da die Zustände zuvor in Abhängigkeit von bestimmten Werten in der Unit0 gesetzt wurden, muss natürlich die Unit0 angezeigt werden. Deshalb wird diese an erster Stelle im Element: `<Units>`eingebunden.

### Ein Komplettes Beispiel

**Setzen von Zuständen:**

```{.xml}
<States>
    <State id="bonus" label="Bonusaufgaben">
      <Option id="bonus1" label="ja" />
      <Option id="bonus2" label="ja" />
        <If>
            <Value of="var1" from="unit0" />
            <Is equal="a" />
        </If>
    </State>
 </States>
```

**Abfrage der Zustände:**

```{.xml}
<Units>

    <Unit id="unit0" label="Startunit" labelshort="1"/>

    <Testlet id="Bonus-Aufgaben-1">
        <Restrictions>
            <Show if="bonus" is="bonus1" />
        </Restrictions>

        <Unit id="BonusUnit1" label="Bonus Unit 1" labelshort="2" />
        <Unit id="BonusUnit2" label="Bonus Unit 2" labelshort="3" />
        <Unit id="BonusUnit3" label="Bonus Unit 3" labelshort="4" />
    </Testlet>

    <Testlet id="Bonus-Aufgaben-2">
        <Restrictions>
            <Show if="bonus" is="bonus2" />
        </Restrictions>

        <Unit id="BonusUnit4" label="Bonus Unit 4" labelshort="5" />
        <Unit id="BonusUnit5" label="Bonus Unit 5" labelshort="6" />
        <Unit id="BonusUnit6" label="Bonus Unit 6" labelshort="7" />
    </Testlet>

</Units>
```

## Konfiguration in der Testtaker-XML

Das Setzen bestimmter Optionen kann auch bereits in Testtaker-XML erfolgen.

Beispiel: Es wird die Option:"yes" für ein Testheft gesetzt.

```{.xml}
<Group id="sample_group" label="Primary Sample Group">

    <Login mode="run-hot-return" name="er3Cdx" pw="123">
      <Booklet>BOOKLET.SAMPLE-1</Booklet>
      <Booklet state="bonus1:yes;dummy:foo">BOOKLET.SAMPLE-1</Booklet>
      <Booklet state="bonus1:yes">BOOKLET.SAMPLE-1</Booklet>
    </Login>

    <Login mode="monitor-group" name="test-group-monitor" pw="user123"/>
  </Group>
```
In diesem Beispiel wird nach der Anmeldung (er3Cdx, 123) 3mal das selbe Testheft: "BOOKLET.SAMPLE-1" angezeigt. Einmal mit Bonusaufgaben und einmal ohne. Damit die Option mit der ID: "yes" bereits über die Testtaker-XML gesetzt werden kann, muss die Option natürlich auch in der Booklet-XML angelegt sein.

```{.xml}
<States>

    <State id="bonus1" label="Bonusmaterial">
        <Option id="no" label="nein" />
        <Option id="yes" label="ja" />
    </State>

<States>
```



THuste: Mit Philipp klären: Was ist dummy:foo?

THuste: Wie ist das mit dem yes und no für bonus1 in der booklet-xml. Muss getestet werden.

