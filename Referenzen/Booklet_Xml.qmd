---
lang: de
title: "Booklet-XML"
---

::: {.callout-note}
In Bearbeitung THuste: to do

* Überarbeiten Layout und Text

:::

## Attribute und Daten

Folgende Funktionen erfüllt die Booklet-XML:

* Festlegung Reihenfolge Aufgaben
* Aufgabenbündelung in Testlets (Blöcke)
* Beschränkungen für Testlets
* Konfiguration Testverhalten, Testlayout, Testmethode (Testheft-Konfiguration)

::: {.callout-important}
Die in der XML-Datei angelegten Attribute und Elemente sind nicht frei wählbar, sondern orientieren sich an einer Schema-Definition. Diese gibt vor, welche Elemente und Attribute verwendet werden dürfen. Die Schema Definition für die Testtaker-XML ist [hier](https://github.com/iqb-berlin/testcenter/blob/master/definitions/vo_Booklet.xsd) ersichtlich.
:::

Die Schema-Definition wird im Kopf der XML eingebunden:

```{.xml .code-overflow-wrap}
<Booklet xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/iqb-berlin/testcenter/15.0.1/definitions/vo_Booklet.xsd">

</Booklet>
```
::: {.callout-note collapse="true"}

## Beispiel XML

```{.xml .code-overflow-wrap}

<?xml version="1.0" encoding="utf-8"?>
<Booklet xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/iqb-berlin/testcenter/15.0.1/definitions/vo_Booklet.xsd">
  <Metadata>
    <Id>BOOKLET.SAMPLE-1</Id>
    <Label>Sample booklet</Label>
    <Description>This a sample booklet for testing/development/showcase purposes.</Description>
  </Metadata>

  <BookletConfig>
    <Config key="unit_screenheader">WITH_BOOKLET_TITLE</Config>
    <Config key="page_navibuttons">SEPARATE_BOTTOM</Config>    
    <Config key="pagingMode">concat-scroll-snap</Config>
    <Config key="force_presentation_complete">ON</Config>
    <Config key="force_response_complete">ON</Config>
  </BookletConfig>

  <Units>

    <Unit id="UNIT.SAMPLE-1" label="A Sample Unit to demonstrate" labelshort="Sample Unit 1"/>

    <Testlet id="tslt1" label="First block with restrictions">
      <Restrictions>
        <CodeToEnter code="sample">Please insert the word `sample`.</CodeToEnter>
        <TimeMax minutes="10" />
        <DenyNavigationOnIncomplete presentation="OFF" response="OFF"/>	
      </Restrictions>
      <Unit id="UNIT.SAMPLE-2" label="A very Simple Sample Unit" labelshort="2nd Sample Unit"/>
    </Testlet>
    
    <Unit id="UNIT.SAMPLE-1" label="A Sample Unit to demonstrate" labelshort="Sample Unit 1" alias="an_alias"/>

    <Testlet id="tslt2" label="Second block without restrictions">
      <Unit id="UNIT.SAMPLE-3" label="Sample Unit again, with Alias" labelshort="Sample Unit Again"/>
    </Testlet>

  </Units>
</Booklet>
```
`Metadata`

In diesem Beispiel erhält das Testheft zuerst eine eindeutige Id: **BOOKLET.SAMPLE-1**. Mit Hilfe dieser Id kann das Testheft in der **Testtaker-XML** eingebunden und einer Testperson zugeordnet werden. Es folgt ein Label und eine Beschreibung, die frei wählbar sind. 

`BookletConfig`

Nachfolgend erfolgt die Booklet-Konfiguration. Hier gibt es eine Vielzahl von Konfigurationsmöglichkeiten. Exemplarisch sind an dieser Stelle einige aufgeführt. Welche Funktionalitäten die einzelnen Werte erfüllen, ist einer entsprechenden Liste zu entnehmen (Verweis im Abschnitt: Testheft-Konfigurationen). Bspw. würde mit dem Wert: `unit_screenheader` und dem Datum: **WITH_BOOKLET_TITLE** während der Testdurchführung das in diesem Beispiel angegebene Label angezeigt werden. 

`Units`

Hier erfolgt nun die Deklaration der während der Testdurchführung angezeigten Aufgaben. Hier wird zuerst eine einleitende Aufgabe mit der Id: **UNIT.SAMPLE-1** aufgerufen. Dieser wird ein entsprechendes Label zugewiesen und ein Short-Label. Letzteres kann bei entsprechender Testheft-Konfiguration in der Aufgaben-Navigationsleiste angezeigt werden.

Es folgt das erste Testlet (Block) mit Zugangsbeschränkungen, einer zeitlichen Beschränkung und einer Navigationsbeschränkung. Die in diesem Beispiel aufgeführte Navigationsbeschränkung `DenyNavigationOnIncomplete` überschreibt das Verhalten in der Testheft-Konfiguration, hier `force_presentation_complete` und `force_response_complete`nur für dieses Testlet. Für das nächste Testlet werden wieder die Werte aus der Testheft-Konfiguration verwendet. Nachfolgend wird eine Aufgabe: **UNIT.SAMPLE-2** in das Testlet eingebunden. Alle Aufgaben in diesem Testlet unterliegen den Beschränkungen des Testlets.

Auf das erste Testlet folgt eine weitere Aufgabe. Es fällt auf, dass diese Aufgabe die selbe Id trägt wie die erste Aufgabe, nämlich: **UNIT.SAMPLE-1**. Die Mehrfacheinbindung einer Aufgabe mit gleicher Id ist nicht erlaubt, das Testcenter würde hier bei der Testheft-Validierung eine entsprechende Fehlermeldung ausgeben. Manchmal kann es aber sinnvoll sein ein und die selbe Aufgabe mehrfach zu verwenden. Aus diesem Grund ist bei dieser Aufgabe ein zusätzliches Attribut: `alias` zu finden. Wird eine Aufgabe mit gleicher Id mehrfach in einem Testheft deklariert, kann mit Hilfe des Alias eine Unterscheidung der Aufgabe stattfinden und die Testcenter-Validierung schlägt nicht fehl.

Es folgt ein weiteres Testlet ohne Beschränkungen und mit nur einer einzigen Aufgabe.
:::





Die Struktur der Elemente einer **Booklet-Xml** sieht wie folgt aus:

```xml
<Booklet xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Ort der Schemadefinition">

<?xml version="1.0" encoding="utf-8"?>

<Metadata>

</Metadata>

<BookletConfig>

</BookletConfig>

    <Units>

        <Testlet>
            
            <Restrictions>

            </Restrictions>
            
            <Unit>

            </Unit>

        </Testlet>

    </Units>

</Booklet>

```

Allen hier aufgeführten Elementen können weitere Attribute und Werte hinzugefügt werden.

Bsp: Das Element `Testlet` kann die Attribute `id` und  `label` enthalten. Diesen Attributen können dann bestimmte Werte zugewiesen werden:

```xml
<Testlet id="TSL01" label="Testlet01">

```

:information_source: Elemente, die nicht benötigt werden, können einfach weggelassen werden. Wird bspw. kein **Testlet** benötigt, weil die Aufgaben (Units) einfach hintereinander weg im Element `<Units>` aufgeführt werden sollen, kann das entsprechende Element einfach weggelassen werden.

:information_source: Jedes Element verfügt über eine festgelegte Anzahl von möglichen Attributen. Diese möglichen Attribute sind in der Schemadefinition festgelegt. Werden ein oder mehrere Attribute nicht explizit aufgeführt und mit einem Wert versehen, werden für dieses Attribute Standardwerte verwendet.  

Nachfolgend werden die oben gezeigten Elemente und deren mögliche Attribute, Attributwerte und Daten aufgeführt.

---

`METADATA`

<table>

<tr>
    <td>Id:</td>
    <td>>xxx<</td>
    <td>Datum</td>
    <td>Frei wählbarer Wert. Der Name muss in gleicher Schreibweise auch in der Testtakers.xml aufgeführt sein damit dieses Booklet aufgerufen werden kann!</td>
</tr>
<tr>
    <td>Label:</td>
    <td>>xxx<</td>
    <td>Datum</td>
    <td>Frei wählbarer Wert zur Bezeichnung des Booklets.</td>
</tr>
<tr>
    <td>Description:</td>
    <td>>xxx<</td>
    <td>Datum</td>
    <td>Frei wählbarer Wert zur weiteren Beschreibung dieses Booklets.</td>
</tr>

</table>

```xml
<Metadata>
  <Id>Booklet1</Id>
  <Label>Sekundarstufe I Englisch Ansichtsaufgaben</Label>
  <Description>Sekundarstufe I Englisch Ansichtsaufgaben</Description>
</Metadata>
```
---

`BOOKLETCONFIG`

<table>

<tr>
    <td>Config:</td>
    <td>key</td>
    <td>Attribut</td>
    <td>Vordefinierter Wert. Ermöglicht eine Booklet Konfiguration. Die möglichen zu verwendenden Werte sind im nächsten Abschnitt zu finden.</td>
</tr>
<tr>
    <td>Config:</td>
    <td>>xxx<</td>
    <td>Datum</td>
    <td>Vordefinierter Wert. Die möglichen zu verwendenden Werte sind im nächsten Abschnitt zu finden.</td>
</tr>

</table>

```xml
<BookletConfig>
  <Config key="vordefinierter Attributwert">vordefiniertes Datum</Config>
</BookletConfig>
```

:information_source: Welche vordefinierten Attributwerte und Daten dem Attribut `key` zugeordnet werden können, ist dem nächsten Abschnitt zu entnehmen.

---

`UNITS`

<table>

<tr>
    <td>Unit:</td>
    <td>id</td>
    <td>Attribut</td>
    <td>Frei wählbarer Wert. Wert muss in gleicher Schreibweise auch in der entsprechenden Unit unter ID aufgeführt sein!</td>
</tr>
<tr>
    <td>Unit:</td>
    <td>label</td>
    <td>Attribut</td>
    <td>Frei wählbarer Wert zur Bezeichnung der Unit.</td>
</tr>
<tr>
    <td>Unit:</td>
    <td>labelshort</td>
    <td>Attribut</td>
    <td>Frei wählbarer Wert zur Bezeichnung der Navigationsleiste im Testcenter.</td>
</tr>
<tr>
    <td>Unit:</td>
    <td>alias</td>
    <td>Attribut</td>
    <td>Eindeutiger frei wählbarer Alias</td>
</tr>

</table>

```xml
<Unit id="Unit_Start" label="Beispielhafte Startseite" labelshort="1" alias=""/>
```
---

`TESTLET`

<table>

<tr>
    <td>Testlet:</td>
    <td>id</td>
    <td>Attribut</td>
    <td>Frei wählbarer Wert.</td>
</tr>
<tr>
    <td>Testlet:</td>
    <td>label</td>
    <td>Attribut</td>
    <td>Frei wählbarer Wert zur Bezeichnung des Testlets.</td>
</tr>

</table>

```xml
<Testlet id="Examples" label="Beispiele">
 
</Testlet>
```

Ein _Testlet_ ist eine Gruppe von Units mit gemeinsamen Restriktionen, beispielsweise einer gemeinsamen Zeitbegrenzung. _Testlets_ können auch rekursiv geschachtelt werden, mit anderen Worten: Ein Testlet kann weitere Testlets enthalten.

Die Testlets der obersten Ebene werden auch Test_blöcke_ genannt.

Zeitbegrenzungen (Restrictions/TimeMax) in geschachtelten Testlets werden ignoriert, sofern diese ebenfalls eine Zeitbegrezung haben.

<table>

<tr>
 <td>Restrictions:</td>
    <td>CodeToEnter:</td>
    <td>code</td>
    <td>Attribut</td>
    <td>Frei wählbarer Code.</td>
</tr>
<tr>
 <td>Restrictions:</td>
    <td>CodeToEnter:</td>
    <td>>xxx<</td>
    <td>Datum</td>
    <td>Frei wählbarer Text. Wird als Text zur Codeeingabe angegeben.</td>
</tr>
<tr>
    <td>Restrictions:</td>
    <td>TimeMax:</td>
    <td>minutes</td>
    <td>Attribut</td>
    <td>Frei wählbarer Wert in Minuten.</td>
</tr>
<tr>
    <td>Restrictions:</td>
    <td>DenyNavigationOnIncomplete:</td>
    <td>presentation</td>
    <td>Attribut</td>
    <td>ON/OFF/ALWAYS</td>
</tr>
<tr>
    <td>Restrictions:</td>
    <td>DenyNavigationOnIncomplete:</td>
    <td>response</td>
    <td>Attribut</td>
    <td>ON/OFF/ALWAYS</td>
</tr>

</table>

```xml
<Restrictions>
    <CodeToEnter code="Hase">Bitte 1. Freigabewort eingeben!</CodeToEnter>
    <TimeMax minutes="20"/>
    <DenyNavigationOnIncomplete presentation="ON" response="ON"/>
</Restrictions>
```
---

### Booklet Konfiguration

Es ist möglich Booklets zu konfigurieren. Hierfür stehen einige Parameter (Attribute) zur Verfügung, die in der Booklet.xml
angegeben werden können. Alle verwendbaren Parameter befinden sich in einer separaten Konfiguraionsdatei
(booklet-config.json) auf die das Testcenter zugreifen kann. Möchten Sie die Bookletkonfiguration bzgl. spezifisches Eigenschaften ändern,
müssen Sie den gewünschten Parameter mit dem gewünschten Wert in der Booklet.xml unter `BookletConfig` angeben. Ein Parameter setzt sich zusammen aus einem Attribut, einem Attributwert und einem entsprechenden Datum. Wie am nachfolgenden Bsp. zu sehen ist, ist `key` das Attribut. Als Attribuwerte können nur vordefinierte Werte verwendet werden. Diese sind der weiter unten aufgeführten Tabelle zu entnehmen. Im nachfolgenden Code wäre der Attributwert bspw. c. Das Datum ist in diesem Fall `OFF`. Auch das mögliche Datum für den jeweiligen Attributwert, ist der unten aufgeführten Tabelle zu entnehmen. Alle Parameter werden global in der Booklet.xml angelegt. Sie gelten dann für jedes in der Booklet.xml definierte Testlet. Eine Ausnahme stellen die beiden Parameter: `force_response_complete` und `force_presentation_complete` dar. Diese können auch Testletspezifisch angelegt werden.

Nachfolgend ist bsph. eine Bookletkonfiguration zu sehen. In der Booklet Konfigurationen werden hier die beiden Parameter: `force_response_complete` und `force_presentation_complete` global für alle Units und Testlets gesetzt. Die beiden Parameter können aber auch für einzelne Testlets die global gesetzten Werte überschreiben. So kann für einzelne Testlets ein anderes Verhalten erzwungen werden.

```xml
<Booklet>
  <Metadata>
      ...
  </Metadata>

  <BookletConfig>
      <Config key="force_response_complete">ON</Config>
      <Config key="force_presentation_complete">ON</Config>
      <Config key="unit_navibuttons">ARROWS_ONLY</Config>
  </BookletConfig>

  <Units>
    
    <Unit id="Start" label="Willkommen" labelshort="•"/>
    
    <Testlet id="Testlet1" label="Testlet 1">
        <Restrictions>
            <CodeToEnter code="Hase">Bitte gib das Freigabewort ein.</CodeToEnter>
            <TimeMax minutes="10"/>
            <DenyNavigationOnIncomplete presentation="OFF" response="OFF" />   
        </Restrictions>

        <Unit id="Aufgabe1" label="Erste Aufgabe" labelshort="1"/>
        <Unit id="Aufgabe2" label="Zweite Aufgabe" labelshort="2"/>

    </Testlet>

    <Unit id="ZWU" label="Zwischenunit" labelshort="•"/>

    <Testlet id="Testlet2" label="Testlet 2">
    
        <Restrictions>
            <CodeToEnter code="Hase">Bitte gib das Freigabewort ein.</CodeToEnter>
            <TimeMax minutes="10"/> 
        </Restrictions>

        <Unit id="Aufgabe3" label="Erste Aufgabe" labelshort="3"/>
        <Unit id="Aufgabe4" label="Zweite Aufgabe" labelshort="4"/>

    </Testlet>

    <Unit id="Ende" label="Verabschiedung" labelshort="•"/>

</Booklet>

```

:information_source: Nicht vergebene Attribute werden mit Standardwerten beschrieben. Ist ein spezifisches Verhalten gewünscht, müssen die entsprechenden Attribute und die zugehörigen Werte angegeben werden!

[**Hier**](https://pages.cms.hu-berlin.de/iqb/testcenter/pages/booklet-config.html) finden Sie eine Übersicht über die verwendbaren Parameter (Attribute) und deren Bedeutung.

:information_source: Achten Sie bei der Verwendung dieser Parameter auf die richtige Schreibweise (Groß-/Kleinschreibung)!

```yaml
Dokumentstatus: Aktualisierungen (THuste)
Stand: 28.02.2024
todo: - Parameter für das adaptive Testen auflisten

```
