{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "lang: de\n",
        "title: Datenstruktur \"Antwort\"\n",
        "---\n",
        "\n",
        "Die Spezifikation in englischer Sprache finden Sie [hier](https://iqb-specifications.github.io/response).\n",
        "\n",
        "# Übersicht\n",
        "\n",
        "| Parameter | erforderlich | Beschreibung / mögliche Werte | Beispiele |\n",
        "|--|:-:|------------------|:--:|\n",
        "| id | x | String; identifiziert die Variable innerhalb der Unit; zulässig: `^[0-9a-zA-Z_]+$` | \"01a\" |\n",
        "| status | x | String aus einer Aufzählung; s. u. | \"NOT_REACHED\" |\n",
        "| value | x | kann verschiedene Datentypen annehmen, s. u. | [\"9\", null] |\n",
        "| subform | - | String; wird benutzt, um das ggf. mehrfache Auftreten der Variablen (z. B. in Kopien bei Unterformularen) zu kennzeichnen | \"p01\" |\n",
        "| code | - | Integer; steht für die zutreffende Kategorie entspr. Kodierschema | 2 |\n",
        "| codes | - | Array von möglichen Codes; wird kurzzeitig im Rahmen des Kodierprozesses genutzt | s.u. |\n",
        "| score | - | Integer; steht für die Bewertung des Codes, also die Übereinstimmung mit einer als \"richtig\" angenommenen Antwort | 0 |\n",
        "\n",
        "# Status\n",
        "\n",
        "Der Status-Wert übernimmt eine wichtige Anzeigefunktion für die Position einer Antwort im Entstehungs- und Verarbeitungsprozess. Die Datenstruktur wird nicht nur bei der Beantwortung der Testitems oder Fragen im Player genutzt, sondern auch während der Kodierung und Ableitung von neuen Variablen.\n",
        "\n",
        "| Wert | Beschreibung |\n",
        "|--|-------------|\n",
        "|`UNSET`|Ausgangszustand beim Anlegen von Variablen. Sollte eine Variable an ein Interaktionselement gebunden sein, dann erhält sie jedoch sofort den Status `NOT_REACHED`.|\n",
        "|`NOT_REACHED`|Ausgangszustand beim Anlegen von Variablen, die an ein Interaktionselement gebunden sind.|\n",
        "|`DISPLAYED`|Variablen, die an ein Interaktionselement gebunden sind, bekommen diesen Status, wenn sie der Testperson präsentiert wurden - also sichtbar sind.|\n",
        "|`PARTLY_DISPLAYED`|Diesen Zustand erhalten abgeleitete Variablen, die von Variablen abgeleitet wurden mit dem Status `PARTLY_DISPLAYED` oder mit `DISPLAYED` sowie außerdem den Status `NOT_REACHED` oder `UNSET`.|\n",
        "|`VALUE_CHANGED`|Dieser Status zeigt an, dass eine Interaktion stattgefunden hat und also der Wert (Value) auszuwerten ist. Bei abgeleiteten Variablen zeigt dieser Status eine erfolgreiche Ableitung an.|\n",
        "|`DERIVE_ERROR`|Dieser Status zeigt an, dass eine Ableitung fehlgeschlagen ist. Dies kann sich beispielsweise auf einen Typkonflikt (numerisch, Text) beziehen und ist in den meisten Fällen über eine Anpassung des Kodierschemas korrigierbar. Der Status bezieht sich allerdings nicht darauf, ob die zugrundeliegenden Variablen einen unzureichenden Status haben, sondern es geht um technische Fehler beim Ableitungsprozess.|\n",
        "|`DERIVE_PENDING`|Dieser Status zeigt an, dass eine Ableitung nicht möglich ist, weil mindestens eine Variable, die zur Ableitung nötig ist, den Status `CODING_INCOMPLETE` oder `CODING_ERROR` hat. Im Arbeitsablauf \"wartet\" diese Variable also darauf, dass eine manuelle Kodierung zu `CODING_COMPLETE` führt und der Autocoder neu angestoßen wird.|\n",
        "|`NO_CODING`|Bei diesem Status wurde festgestellt, dass keine Informationen für eine Kodierung vorliegen (keine Codes sind im Kodierschema definiert). Das stellt eine Fehlersituation dar. |\n",
        "|`INVALID`|Es wurde bei diesem Status eine Antwort festgestellt, die außerhalb des zulässigen Bereiches liegt. Beispielsweise wurde zwar zunächst ein Text eingegeben, dann aber alles gelöscht, so dass eine leere Antwort gespeichert wurde. Mit diesem Code werden auch Spaßantworten \"Mir ist langweilig\" kodiert.|\n",
        "|`CODING_INCOMPLETE`|Dieser Code zeigt nach einem Durchlauf einer Kodierprozedur an, dass keiner der vorgesehenen Codes als zutreffend angesehen wurde. Dieser Kodierfall muss dann manuell gesichtet werden.|\n",
        "|`CODING_ERROR`|Während der Kodierung ist ein Fehler aufgetreten, der die Bewertung der Antwort verhindert hat. Dies kann ein technischer Fehler bei der Anzeige (Replay) für das manuelle Kodieren sein, aber auch Typkonflikte zwischen dem Wert und dem Kodierschema können die Ursache sein.|\n",
        "|`INTENDED_INCOMPLETE`|Die Kodierung der Variablen ist nicht abgeschlossen, aber dies stellt keinen Fehler dar. Es handelt sich hier z. B. um Variablen, die über andere Wege kodiert werden sollen (z. B. Rating oder Übersetzung in Berufe-Codes außerhalb der regulären Kodierprozesse). Es kann auch sein, dass der Variablenwert erst durch eine Ableitung ausgewertet wird und innerhalb der Variable keine isolierte Bewertung möglich ist.|\n",
        "|`CODE_SELECTION_PENDING`|Die Kodierung der Variablen führte zu mehreren möglichen Codes. Dies kann vorkommen, wenn (a) mehrere Kodierer*innen denselben Fall kodieren sollen (Mehrfachkodierung bei offenen Antworten) oder (b) eine KI-gestützte Kodierung mehrere Vorschläge liefert. Dann muss als nächster Schritt einer der Codes ausgewählt werden und dieser Statuswert zeigt diesen Zustand an.|\n",
        "|`CODING_COMPLETE`|Die Kodierung der Variablen ist erfolgreich abgeschlossen.|\n",
        "\n",
        "::: {.callout-caution}\n",
        "## Status bei Ableitung\n",
        "Für die Interpretation der aggregierten (abgeleiteten) Variablen spielt der Status eine herausragende Rolle. [Siehe hier](../missings.qmd#fälle-innerhalb-einer-unit) für eine detaillierte Beschreibung.\n",
        ":::\n",
        "\n",
        "# Value Types\n",
        "\n",
        "* array<string | null>\n",
        "* array<number | null>\n",
        "* array<boolean | null>\n",
        "* number\n",
        "* string\n",
        "* null\n",
        "* boolean\n",
        "\n",
        "::: {.callout-caution}\n",
        "In Computersprachen, die eine strikte Typisierung erzwingen, ist diese Variabilität des Datentyps ärgerlich. JSON als Datenformat bietet dies zwar an, in der Praxis ist aber oft eine Transformation in den Datentyp `String` gebräuchlich.\n",
        ":::\n",
        "\n",
        "# codes\n",
        "\n",
        "Für jeden Code, den der Kodierprozess ggf. liefert, kann ein Parameter vom Typ `string` übergeben werden, der dann bei der Codeselektion hilft. Bei manuellem Kodieren durch mehrere Kodierer*innen kann das eine ID der Kodierperson sein. Bei KI-gestütztem Kodieren kann das ein numerischer Wert sein, der die Verlässlichkeit des Codes repräsentiert. Die Nutzung des Zusatz-Parameters ist hier nicht spezifiziert und muss gesondert dokumentiert werden.\n",
        "\n",
        "```{json}\n",
        "{\n",
        "    \"id\": \"MER923\",\n",
        "    \"status\": \"CODE_SELECTION_PENDING\",\n",
        "    \"value\": \"sdos difosid hfosidhf osdihof\",\n",
        "    \"codes\": [\n",
        "        {\n",
        "            \"id\": 4,\n",
        "            \"parameter\": \"75\"\n",
        "        }\n",
        "        {\n",
        "            \"id\": 6,\n",
        "            \"parameter\": \"12\"\n",
        "        }\n",
        "        {\n",
        "            \"id\": 8,\n",
        "            \"parameter\": \"6\"\n",
        "        }\n",
        "    ]\n",
        "}\n",
        "\n",
        "\n",
        "```"
      ],
      "id": "dacc0de9"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}